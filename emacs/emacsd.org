* Meta

Defer garbage collection during init, as suggested [[https://github.com/nilcons/emacs-use-package-fast#a-trick-less-gc-during-startup][here]].
Benchmarking on the config at the time this is being added:
  - 1054ms startup time without
  - 833ms startup time with
Looks like a free 20% improvement to me!

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 64000000)
  (add-hook 'after-init-hook #'(lambda ()
                                 ;; restore after startup
                                 (setq gc-cons-threshold 800000)))
#+END_SRC

Bootstrap ~straight.el~ as instructed by [[https://github.com/raxod502/straight.el#getting-started][the docs]].

#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

Install [[https://github.com/jwiegley/use-package][~use-package~]], enable ~straight.el~ inegration.

By default, packages enabled through ~(use-package ...)~ will be automatically
installed as if ~(straight-use-package ...)~ was invoked. To disable this for a
specific package, use ~:straight nil~. (docs [[https://github.com/raxod502/straight.el#integration-with-use-package][here]])

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+END_SRC

Emacs Start Up Profiler.

#+BEGIN_SRC emacs-lisp
  (use-package esup
    :commands esup)
#+END_SRC
* Base
** Sane looks

No startup messages.

#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message ""
      inhibit-startup-message t
      inhibit-startup-screen t
      inhibit-startup-echo-area-message t)
#+END_SRC

No cursor blinkage.

#+BEGIN_SRC emacs-lisp
(blink-cursor-mode 0)
#+END_SRC
** Sane behavior

Store backups in [[/tmp]].

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+END_SRC

Show current column.

#+BEGIN_SRC emacs-lisp
(column-number-mode)
#+END_SRC

Set the default <number>-column-rule to 80-column-rule.

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
#+END_SRC

No warnings in native-comp emacs

#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(warning-suppress-types '((comp) (comp))))
#+END_SRC
** Misc config
*** GPG
#+BEGIN_SRC emacs-lisp
  (setq epa-pinentry-mode 'loopback) ; pinentry inside emacs
  (setq epa-file-cache-passphrase-for-symmetric-encryption t) ; do not ask for passphrase too often
#+END_SRC
* Looks
Font.

#+BEGIN_SRC emacs-lisp
(set-frame-font "{{mono_font_family}}-{{mono_font_size}}")
#+END_SRC

Theme.

#+BEGIN_SRC emacs-lisp
  (use-package base16-theme
    :init (load-theme '{{base16-theme-name}} t))
#+END_SRC

All the icons.

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :custom (all-the-icons-scale-factor 0.9))
#+END_SRC

All the themes.

#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme :disabled
    :init (load-theme 'gruvbox-light-hard t))
#+END_SRC
* Packages
** Generic
*** Evil

> Both?
> Both.
> *Both.*
> *Both is good.*

#+BEGIN_SRC emacs-lisp
  (use-package evil
    ; [https://jeffkreeftmeijer.com/emacs-evil-org-tab/]
    :init (setq evil-want-C-i-jump nil)

    :custom
    (evil-want-abbrev-expand-on-insert-exit nil "Do not autocomplete on exiting insert mode")
    (evil-want-C-u-scroll t "C-u scrolls up")
    (evil-undo-system 'undo-tree "Use undo-tree")

    ; [for evil-collection]
    (evil-want-integration t)
    (evil-want-keybinding nil)

    :bind (:map evil-normal-state-map
                ("M-." . nil))

    :config
    (evil-set-leader '(normal visual) (kbd "<SPC>"))
    (require 'evil)
    (evil-mode)

    ; custom functions to make [j] [k] work nicely with both wrapped lines and motions
    ; courtesy of [https://github.com/emacs-evil/evil/issues/817]
    (evil-define-motion my-evil-previous-line (count)
      :type line
      (let ((command (if count 'evil-previous-line 'evil-previous-visual-line)))
        (funcall command (prefix-numeric-value count))))
    (evil-define-motion my-evil-next-line (count)
      :type line
      (let ((command (if count 'evil-next-line 'evil-next-visual-line)))
        (funcall command (prefix-numeric-value count))))
    (define-key evil-motion-state-map (kbd "k") 'my-evil-previous-line)
    (define-key evil-motion-state-map (kbd "j") 'my-evil-next-line))
#+END_SRC

More eviler.

#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+END_SRC

Undo for the sane.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :custom
    (undo-tree-history-directory-alist '(("." . "~/.config/undo-tree")))
    :config (global-undo-tree-mode))
#+END_SRC

Nicely and easily visually fold arbitrary blocks of text.

#+BEGIN_SRC emacs-lisp
  (use-package vimish-fold
    :after evil
    :config
    (evil-define-key '(normal visual) 'global (kbd "<leader>fc") 'vimish-fold)
    (evil-define-key '(normal visual) 'global (kbd "<leader>fd") 'vimish-fold-delete)
    (evil-define-key '(normal visual) 'global (kbd "<leader>ft") 'vimish-fold-toggle))
#+END_SRC

The evil file manager.

#+BEGIN_SRC emacs-lisp
  (use-package ranger
    :bind ("C-x C-r" . ranger)
    :hook (emacs-startup . ranger)
    :custom
    (ranger-excluded-extensions '("gpg") "Do not try to decrypt for preview"))
#+END_SRC
*** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :config (ivy-mode))
#+END_SRC
*** Misc

Ability to bump self to root if needed to save a file.

#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :defer)
#+END_SRC

Scroll smoothly when reaching end of buffer.

#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling
    :config (smooth-scrolling-mode))
#+END_SRC

Make keybindings more accessible & discoverable.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init (which-key-mode))
#+END_SRC

git

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x C-m" . magit-status))
#+END_SRC

When it comes to Emacs..I need all the help I can get.

#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :defer
    :bind
    ("C-h f" . #'helpful-callable)
    ("C-h v" . #'helpful-variable)
    ("C-h k" . #'helpful-key))
#+END_SRC

Colorize color names in buffers.

The customization enables rainbow-mode to highlight the names of base16-theme
colors with the ones in the current theme, provided the handlebars expressions
are substituted with corresponding hex codes. (probably by dotfile manager)

This kind of already exists in the major ~css-mode~, but looks to be a pain to
get working as a customizable minor mode.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :commands rainbow-mode
    :custom
    (rainbow-html-colors t)
    :config
    (setq rainbow-html-colors-alist
          (append rainbow-html-colors-alist
                  '(("base00" . "{{base00}}")
                    ("base01" . "{{base01}}")
                    ("base02" . "{{base02}}")
                    ("base03" . "{{base03}}")
                    ("base04" . "{{base04}}")
                    ("base05" . "{{base05}}")
                    ("base06" . "{{base06}}")
                    ("base07" . "{{base07}}")
                    ("base08" . "{{base08}}")
                    ("base09" . "{{base09}}")
                    ("base0A" . "{{base0A}}")
                    ("base0B" . "{{base0B}}")
                    ("base0C" . "{{base0C}}")
                    ("base0D" . "{{base0D}}")
                    ("base0E" . "{{base0E}}")
                    ("base0F" . "{{base0F}}")))))
#+END_SRC

Fold all minor mode indicators into one with a menu.

#+BEGIN_SRC emacs-lisp
  (use-package minions
    :config (minions-mode))
#+END_SRC

** Languages
*** yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode)
#+END_SRC
*** justfile
#+BEGIN_SRC emacs-lisp
  (use-package just-mode)
#+END_SRC
*** dockerfile
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode)
#+END_SRC
*** org-mode

ACTN: add proper MIME file openers


#+BEGIN_SRC emacs-lisp
  ; disable the Emacs built-in org-mode
  (straight-use-package '(org :type built-in) :disabled)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org
    :custom
    (org-startup-indented t "Visual indentation by default")

    (org-ellipsis "Ë‡" "Symbol shown on expandable headings")

    ;(org-log-done 'time "Log time of task completion")

    (org-cycle-separator-lines -1 "Allow blank lines outside of headings")

    (org-agenda-files '("~/org"))

    (org-blank-before-new-entry '((heading . nil) (plain-list-item . nil))
                                "Do not add blank lines when inserting new items")

    (org-todo-keywords '((sequence "ACTN" "CURR" "|" "DONE")
                         (sequence "|" "FAIL")
                         (sequence "|" "JUNK")))

    (org-todo-keyword-faces '(("CURR" . (:foreground "orange" :weight bold :background "gray16"))
                              ("FAIL" . (:foreground "black" :background "gray20"))
                              ("JUNK" . (:foreground "black" :background "gray20"))))

    (org-archive-location "~/org/amygdala/org-archive.org::")

    (org-archive-save-context-info '(time file))

    (org-link-frame-setup
     '((vm . vm-visit-folder-other-frame)
       (vm-imap . vm-visit-imap-folder-other-frame)
       (gnus . org-gnus-no-new-news)
       (file . find-file) ; open org links in the same window
       (wl . wl-other-frame)))

    :bind (:map org-mode-map
                ("C-c C-<return>" . org-todo)))
#+END_SRC

[[https://github.com/org-roam/org-roam][org-roam]]

#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory "~/org")
    :config
    (org-roam-db-autosync-mode))

  (use-package org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

#+END_SRC
*** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :mode "\\.page\\'")

  (use-package langtool
    :if (executable-find "languagetool")
    :commands langtool-check
    :custom
    (langtool-java-classpath "/usr/share/languagetool:/usr/share/java/languagetool/*"))

  (use-package centered-window
    :custom
    (cwm-centered-window-width 90))
#+END_SRC
*** DOT
#+BEGIN_SRC emacs-lisp
  (use-package graphviz-dot-mode
    :mode "\\.gv\\'"
    :custom
    (graphviz-dot-preview-extension "svg")
    :hook (graphviz-dot-mode . rainbow-mode))
#+END_SRC
*** Coq
#+BEGIN_SRC emacs-lisp
  (use-package proof-general

    ;; TODO: this never gets executed
    ;; See [https://emacs.stackexchange.com/questions/33591/use-package-does-not-execute-config]
    ;; [pp-macroexpand-last-sexp] helps
    ;; :config
    ;; (put 'company-coq-fold 'disabled nil) ; allow folding proofs
    ;; (evil-define-key 'normal 'coq-mode-map
    ;;   (kbd "<leader>n") 'proof-assert-next-command-interactive)
    ;; (evil-define-key 'normal 'coq-mode-map
    ;;   (kbd "<leader>u") 'proof-undo-last-successful-command)

    :hook
    (coq-mode . undo-tree-mode) ; (global-undo-tree-mode doesn't work?)
    :custom
    (coq-smie-user-tokens '(("â‰ˆ" . "=") ("â‰¡" . "="))
                          "Proper indentation for equivalence symbols")
    (proof-splash-enable nil "No startup screen junk")
    :custom-face
    (proof-queue-face  ((t (:background "dark slate gray"))))
    (proof-locked-face ((t (:background "gray8")))))

  (use-package company-coq
    :hook (coq-mode . company-coq-mode) 
    :bind (:map company-coq-map
                ("C-c d" . company-coq-diff-unification-error)))
#+END_SRC
*** OCaml
Stolen from [[https://github.com/vzaliva/scripts_and_configs/blob/master/configs/.emacs][vzaliva]].

#+BEGIN_SRC emacs-lisp
  (use-package tuareg
    :config (add-to-list 'auto-mode-alist '("\\.ml\\'" . tuareg-mode)) ;Overwrite default mode for .ml which was SLIME
    (use-package merlin
      :bind (:map merlin-mode-map ("M-." . merlin-locate))
      :init
      (autoload 'merlin-mode "merlin" "Merlin mode" t)
      (add-hook 'tuareg-mode-hook 'merlin-mode)
      (add-hook 'caml-mode-hook 'merlin-mode)))
#+END_SRC
*** F*
#+BEGIN_SRC emacs-lisp
  (use-package fstar-mode)
#+END_SRC
*** Python
#+BEGIN_SRC emacs-lisp
  (use-package elpy ; python
    :hook (python-mode . elpy-enable))
#+END_SRC
*** Haskell
**** dante
#+BEGIN_SRC emacs-lisp
  (use-package dante :disabled
    :hook (haskell-mode . flycheck-mode)
          (haskell-mode . dante-mode))
#+END_SRC
**** lsp
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook (haskell-mode . lsp))
  (use-package lsp-ui
    :after lsp-mode)
  (use-package lsp-haskell
    :defer)
#+END_SRC
