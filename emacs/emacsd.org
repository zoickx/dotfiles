* Meta

Bootstrap ~straight.el~ as instructed by [[https://github.com/raxod502/straight.el#getting-started][the docs]].

#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

Install [[https://github.com/jwiegley/use-package][~use-package~]], enable ~straight.el~ inegration.

By default, packages through ~(use-package ...)~ will be automatically installed
as if ~(straight-use-package ...)~ was invoked. To disable this for a specific
package, use ~:straight nil~. (docs [[https://github.com/raxod502/straight.el#integration-with-use-package][here]])

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+END_SRC

Defer garbage collection during init, as suggested [[https://github.com/nilcons/emacs-use-package-fast#a-trick-less-gc-during-startup][here]].
Benchmarking on the config at the time this is being added:
  - 1054ms startup time without
  - 833ms startup time with
Looks like a free 20% improvement to me!

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 64000000)
  (add-hook 'after-init-hook #'(lambda ()
                                 ;; restore after startup
                                 (setq gc-cons-threshold 800000)))
#+END_SRC

Emacs Start Up Profiler.

#+BEGIN_SRC emacs-lisp
  (use-package esup
    :commands esup)
#+END_SRC
* Base
** Sane looks

No startup messages.

#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message ""
      inhibit-startup-message t
      inhibit-startup-screen t
      inhibit-startup-echo-area-message t)
#+END_SRC

No cursor blinkage.

#+BEGIN_SRC emacs-lisp
(blink-cursor-mode 0)
#+END_SRC
** Sane behavior

Store backups in [[/tmp]].

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+END_SRC

Show current column.

#+BEGIN_SRC emacs-lisp
(column-number-mode)
#+END_SRC

Set the default <number>-column-rule to 80-column-rule.

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
#+END_SRC
** Misc config
*** GPG
#+BEGIN_SRC emacs-lisp
  (setq epa-pinentry-mode 'loopback) ; pinentry inside emacs
  (setq epa-file-cache-passphrase-for-symmetric-encryption t) ; do not ask for passphrase too often
#+END_SRC
* Looks
Font.

#+BEGIN_SRC emacs-lisp
(set-frame-font "Iosevka-16")
#+END_SRC

Theme.

#+BEGIN_SRC emacs-lisp
(use-package base16-theme
  :init (load-theme 'base16-google-dark t))
#+END_SRC
* Packages
** Generic
*** Evil

> Both?
> Both.
> *Both.*
> *Both is good.*

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :custom
    (evil-want-abbrev-expand-on-insert-exit nil "Do not autocomplete on exiting insert mode")
    (evil-want-C-u-scroll t "C-u scrolls up")
    (evil-undo-system 'undo-tree "Use undo-tree")
    :bind (:map evil-normal-state-map
                ("M-." . nil))
    :config
    (evil-set-leader '(normal visual) (kbd "<SPC>"))
    (require 'evil)
    (evil-mode)

    ; custom functions to make [j] [k] work nicely with both wrapped lines and motions
    ; courtesy of [https://github.com/emacs-evil/evil/issues/817]
    (evil-define-motion my-evil-previous-line (count)
      :type line
      (let ((command (if count 'evil-previous-line 'evil-previous-visual-line)))
        (funcall command (prefix-numeric-value count))))
    (evil-define-motion my-evil-next-line (count)
      :type line
      (let ((command (if count 'evil-next-line 'evil-next-visual-line)))
        (funcall command (prefix-numeric-value count))))
    (define-key evil-motion-state-map (kbd "k") 'my-evil-previous-line)
    (define-key evil-motion-state-map (kbd "j") 'my-evil-next-line))
#+END_SRC

Undo for the sane.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :config (global-undo-tree-mode))
#+END_SRC

Nicely and easily visually fold arbitrary blocks of text.

#+BEGIN_SRC emacs-lisp
  (use-package vimish-fold
    :after evil
    :config
    (evil-define-key '(normal visual) 'global (kbd "<leader>fc") 'vimish-fold)
    (evil-define-key '(normal visual) 'global (kbd "<leader>fd") 'vimish-fold-delete)
    (evil-define-key '(normal visual) 'global (kbd "<leader>ft") 'vimish-fold-toggle))
#+END_SRC

The evil file manager.

#+BEGIN_SRC emacs-lisp
  (use-package ranger
    :bind ("C-x C-r" . ranger)
    :hook (emacs-startup . ranger)
    :custom
    (ranger-excluded-extensions '("gpg") "Do not try to decrypt for preview"))
#+END_SRC
*** Misc

Ability to bump self to root if needed to save a file.

#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit)
#+END_SRC

Scroll smoothly when reaching end of buffer.

#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling
    :config (smooth-scrolling-mode))
#+END_SRC

Make keybindings more accessible & discoverable.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init (which-key-mode))
#+END_SRC

git

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x C-m" . magit-status))
#+END_SRC
** Languages
*** org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :custom
    (org-startup-indented t "Visual indentation by default")

    (org-ellipsis "ˇ" "Symbol shown on expandable headings")

    ;(org-log-done 'time "Log time of task completion")

    (org-cycle-separator-lines -1 "Allow blank lines outside of headings")

    (org-agenda-files '("~/org"))

    (org-blank-before-new-entry '((heading . nil) (plain-list-item . nil))
                                "Do not add blank lines when inserting new items")

    (org-todo-keywords '((sequence "ACTN" "CURR" "|" "DONE")
                         (sequence "|" "FAIL")
                         (sequence "|" "JUNK")))

    (org-todo-keyword-faces '(("CURR" . (:foreground "orange" :weight bold :background "gray16"))
                              ("FAIL" . (:foreground "black" :background "gray20"))
                              ("JUNK" . (:foreground "black" :background "gray20"))))

    (org-archive-location "~/org/amygdala/org-archive.org::")
    (org-archive-save-context-info '(time file))

    :bind (:map org-mode-map
                ("C-c C-<return>" . org-todo)))
#+END_SRC
*** markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :mode "\\.page\\'")

  (use-package langtool
    :if (executable-find "languagetool")
    :commands langtool-check
    :custom
    (langtool-java-classpath "/usr/share/languagetool:/usr/share/java/languagetool/*"))

  (use-package centered-window
    :custom
    (cwm-centered-window-width 90))
#+END_SRC
*** coq
#+BEGIN_SRC emacs-lisp
  (use-package proof-general

    ;; TODO: this never gets executed
    ;; See [https://emacs.stackexchange.com/questions/33591/use-package-does-not-execute-config]
    ;; [pp-macroexpand-last-sexp] helps
    ;; :config
    ;; (put 'company-coq-fold 'disabled nil) ; allow folding proofs
    ;; (evil-define-key 'normal 'coq-mode-map
    ;;   (kbd "<leader>n") 'proof-assert-next-command-interactive)
    ;; (evil-define-key 'normal 'coq-mode-map
    ;;   (kbd "<leader>u") 'proof-undo-last-successful-command)

    :hook
    (coq-mode . undo-tree-mode) ; (global-undo-tree-mode doesn't work?)
    :custom
    (coq-smie-user-tokens '(("≈" . "=") ("≡" . "="))
                          "Proper indentation for equivalence symbols")
    (proof-splash-enable nil "No startup screen junk")
    :custom-face
    (proof-queue-face  ((t (:background "dark slate gray"))))
    (proof-locked-face ((t (:background "gray8")))))

  (use-package company-coq
    :hook (coq-mode . company-coq-mode) 
    :bind (:map company-coq-map
                ("C-c d" . company-coq-diff-unification-error)))
#+END_SRC
*** python
#+BEGIN_SRC emacs-lisp
  (use-package elpy ; python
    :hook (python-mode . elpy-enable))
#+END_SRC
*** haskell
**** dante
#+BEGIN_SRC emacs-lisp
  (use-package dante
    :disabled
    :hook (haskell-mode . flycheck-mode)
          (haskell-mode . dante-mode))
#+END_SRC
**** lsp
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook (haskell-mode . lsp))
  (use-package lsp-ui
    :after lsp-mode)
  (use-package haskell-mode)
  (use-package lsp-haskell
    :defer)
#+END_SRC
